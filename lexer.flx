%{
#include "Parser.h"
#include <stdio.h>

void lexDebug(char* str)
{
#ifdef PRINT
	printf("%s", str);
#endif
}
%}

%option outfile="Lexer.c" header-file="Lexer.h"

tINT (-?[1-9][0-9]*)|(0)
tTRUE true
tFALSE false
tIF if
tTHEN then
tELSE else 
tWHILE while
tAND and
tBEGIN begin
tEND end
tPROC proc
tENDPROC endproc
tMAIN main
tENDMAIN endmain
tPLUS \+
tMULT \*
tSEMI ; 
tISEQUAL == 
tASSIGN = 
tSMALLER <
tNEWLINE \n
tIDENT [_a-zA-Z][_a-zA-Z0-9]*

%% 
{tINT} { lexDebug("int\n"); yylval.str = strdup(yytext); return tINT; }
{tTRUE} { lexDebug("true\n"); return tTRUE; }
{tFALSE} { lexDebug("false\n"); return tFALSE; }
{tIF} { lexDebug("if\n"); return tIF; }
{tTHEN} { lexDebug("then\n"); return tTHEN; }
{tELSE} { lexDebug("else\n"); return tELSE; }
{tWHILE} { lexDebug("while\n"); return tWHILE; }
{tAND} { lexDebug("and\n"); return tAND; }
{tBEGIN} { lexDebug("begin\n"); return tBEGIN; }
{tEND} { lexDebug("end\n"); return tEND; }
{tPROC} { lexDebug("proc\n"); return tPROC; }
{tENDPROC} { lexDebug("endproc\n"); return tENDPROC; }
{tMAIN} { lexDebug("main\n"); return tMAIN; }
{tENDMAIN} { lexDebug("endmain\n"); return tENDMAIN; }
{tPLUS} { lexDebug("puls\n"); return tPLUS; }
{tMULT} { lexDebug("mult\n"); return tMULT; }
{tSEMI} { lexDebug("semi\n"); return tSEMI; }
{tISEQUAL} { lexDebug("isequal\n"); return tISEQUAL; } 
{tASSIGN} { lexDebug("assign\n"); return tASSIGN; } 
{tSMALLER} { lexDebug("smaller\n"); return tSMALLER; }
{tIDENT} {
	lexDebug("ident\n");
	yylval.str = strdup(yytext);
	return tIDENT;
}
{tNEWLINE} { ++yylineno; }
[ ]+ 
. { char damn [2] = {yytext[0] , ' '}; lexDebug(damn); return yytext[0]; } 
%%

int yyerror(const char *msg) {
    printf("Error:%s\n",msg); return 0;
}

