%{
#include "Parser.h"
%}

%option outfile="Lexer.c" header-file="Lexer.h"
%option yylineno

tINT (-?[1-9][0-9]*)|(0)
tTRUE true
tFALSE false
tIF if
tTHEN then
tELSE else 
tWHILE while
tAND and
tBEGIN begin
tEND end
tPROC proc
tENDPROC endproc
tMAIN main
tENDMAIN endmain
tPLUS \+
tMULT \*
tSEMI ; 
tISEQUAL == 
tASSIGN = 
tSMALLER <
tNEWLINE \n
tIDENT [_a-zA-Z][_a-zA-Z0-9]*

%% 
{tINT} 		{ yylval.var = strdup(yytext); return tINT; }
{tTRUE} 	{ return tTRUE; }
{tFALSE} 	{ return tFALSE; }
{tIF} 		{ return tIF; }
{tTHEN} 	{ return tTHEN; }
{tELSE} 	{ return tELSE; }
{tWHILE} 	{ return tWHILE; }
{tAND} { 	return tAND; }
{tBEGIN} 	{ return tBEGIN; }
{tEND} 		{ return tEND; }
{tPROC} 	{ return tPROC; }
{tENDPROC} 	{ return tENDPROC; }
{tMAIN} 	{ return tMAIN; }
{tENDMAIN} 	{ return tENDMAIN; }
{tPLUS} 	{ return tPLUS; }
{tMULT} 	{ return tMULT; }
{tSEMI} 	{ return tSEMI; }
{tISEQUAL} 	{ return tISEQUAL; } 
{tASSIGN} 	{ return tASSIGN; } 
{tSMALLER} 	{ return tSMALLER; }
{tIDENT} 	{ yylval.var = strdup(yytext); return tIDENT; }
{tNEWLINE} 	{}
[ \t]+ 		{}
. 			{ return yytext[0]; } 
%%

